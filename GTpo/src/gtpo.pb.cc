// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtpo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gtpo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gtpo {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* Void_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Void_reflection_ = NULL;
const ::google::protobuf::Descriptor* Graph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Graph_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gtpo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_gtpo_2eproto() {
  protobuf_AddDesc_gtpo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gtpo.proto");
  GOOGLE_CHECK(file != NULL);
  Node_descriptor_ = file->message_type(0);
  static const int Node_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, user1_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      -1,
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _is_default_instance_));
  Edge_descriptor_ = file->message_type(1);
  static const int Edge_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, edge_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, src_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, dst_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, user1_),
  };
  Edge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Edge_descriptor_,
      Edge::default_instance_,
      Edge_offsets_,
      -1,
      -1,
      -1,
      sizeof(Edge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _is_default_instance_));
  Group_descriptor_ = file->message_type(2);
  static const int Group_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, node_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, user1_),
  };
  Group_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Group_descriptor_,
      Group::default_instance_,
      Group_offsets_,
      -1,
      -1,
      -1,
      sizeof(Group),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _is_default_instance_));
  Void_descriptor_ = file->message_type(3);
  static const int Void_offsets_[1] = {
  };
  Void_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Void_descriptor_,
      Void::default_instance_,
      Void_offsets_,
      -1,
      -1,
      -1,
      sizeof(Void),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Void, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Void, _is_default_instance_));
  Graph_descriptor_ = file->message_type(4);
  static const int Graph_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, node_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, edge_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, group_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, edges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, groups_),
  };
  Graph_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Graph_descriptor_,
      Graph::default_instance_,
      Graph_offsets_,
      -1,
      -1,
      -1,
      sizeof(Graph),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gtpo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Edge_descriptor_, &Edge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Group_descriptor_, &Group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Void_descriptor_, &Void::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Graph_descriptor_, &Graph::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gtpo_2eproto() {
  delete Node::default_instance_;
  delete Node_reflection_;
  delete Edge::default_instance_;
  delete Edge_reflection_;
  delete Group::default_instance_;
  delete Group_reflection_;
  delete Void::default_instance_;
  delete Void_reflection_;
  delete Graph::default_instance_;
  delete Graph_reflection_;
}

void protobuf_AddDesc_gtpo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_gtpo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngtpo.proto\022\007gtpo.pb\032\031google/protobuf/a"
    "ny.proto\"\235\001\n\004Node\022\017\n\007node_id\030\001 \001(\005\022\r\n\005la"
    "bel\030\002 \001(\t\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\t\n\001z\030\005 \001"
    "(\001\022\r\n\005width\030\006 \001(\001\022\016\n\006height\030\007 \001(\001\022\020\n\010gro"
    "up_id\030\010 \001(\005\022#\n\005user1\030* \001(\0132\024.google.prot"
    "obuf.Any\"\201\001\n\004Edge\022\017\n\007edge_id\030\001 \001(\005\022\023\n\013sr"
    "c_node_id\030\002 \001(\005\022\023\n\013dst_node_id\030\003 \001(\005\022\016\n\006"
    "weight\030\004 \001(\001\022\t\n\001z\030\005 \001(\001\022#\n\005user1\030* \001(\0132\024"
    ".google.protobuf.Any\"\237\001\n\005Group\022\020\n\010group_"
    "id\030\001 \001(\005\022\r\n\005label\030\002 \001(\t\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030"
    "\004 \001(\001\022\t\n\001z\030\005 \001(\001\022\r\n\005width\030\006 \001(\001\022\016\n\006heigh"
    "t\030\007 \001(\001\022\020\n\010node_ids\030\014 \003(\005\022#\n\005user1\030* \001(\013"
    "2\024.google.protobuf.Any\"\006\n\004Void\"\264\001\n\005Graph"
    "\022\022\n\nnode_count\030\001 \001(\005\022\022\n\nedge_count\030\002 \001(\005"
    "\022\023\n\013group_count\030\003 \001(\005\022#\n\005nodes\030\014 \003(\0132\024.g"
    "oogle.protobuf.Any\022#\n\005edges\030\r \003(\0132\024.goog"
    "le.protobuf.Any\022$\n\006groups\030\016 \003(\0132\024.google"
    ".protobuf.Anyb\006proto3", 701);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gtpo.proto", &protobuf_RegisterTypes);
  Node::default_instance_ = new Node();
  Edge::default_instance_ = new Edge();
  Group::default_instance_ = new Group();
  Void::default_instance_ = new Void();
  Graph::default_instance_ = new Graph();
  Node::default_instance_->InitAsDefaultInstance();
  Edge::default_instance_->InitAsDefaultInstance();
  Group::default_instance_->InitAsDefaultInstance();
  Void::default_instance_->InitAsDefaultInstance();
  Graph::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gtpo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gtpo_2eproto {
  StaticDescriptorInitializer_gtpo_2eproto() {
    protobuf_AddDesc_gtpo_2eproto();
  }
} static_descriptor_initializer_gtpo_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kNodeIdFieldNumber;
const int Node::kLabelFieldNumber;
const int Node::kXFieldNumber;
const int Node::kYFieldNumber;
const int Node::kZFieldNumber;
const int Node::kWidthFieldNumber;
const int Node::kHeightFieldNumber;
const int Node::kGroupIdFieldNumber;
const int Node::kUser1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gtpo.pb.Node)
}

void Node::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  user1_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gtpo.pb.Node)
}

void Node::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0;
  y_ = 0;
  z_ = 0;
  width_ = 0;
  height_ = 0;
  group_id_ = 0;
  user1_ = NULL;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:gtpo.pb.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete user1_;
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtpo_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:gtpo.pb.Node)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Node, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Node*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, height_);
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && user1_ != NULL) delete user1_;
  user1_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gtpo.pb.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }

      // optional string label = 2;
      case 2: {
        if (tag == 18) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gtpo.pb.Node.label"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_x;
        break;
      }

      // optional double x = 3;
      case 3: {
        if (tag == 25) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_y;
        break;
      }

      // optional double y = 4;
      case 4: {
        if (tag == 33) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_z;
        break;
      }

      // optional double z = 5;
      case 5: {
        if (tag == 41) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_width;
        break;
      }

      // optional double width = 6;
      case 6: {
        if (tag == 49) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_height;
        break;
      }

      // optional double height = 7;
      case 7: {
        if (tag == 57) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_group_id;
        break;
      }

      // optional int32 group_id = 8;
      case 8: {
        if (tag == 64) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_user1;
        break;
      }

      // optional .google.protobuf.Any user1 = 42;
      case 42: {
        if (tag == 338) {
         parse_user1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gtpo.pb.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gtpo.pb.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gtpo.pb.Node)
  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // optional string label = 2;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gtpo.pb.Node.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // optional double x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // optional double y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // optional double z = 5;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->z(), output);
  }

  // optional double width = 6;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double height = 7;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height(), output);
  }

  // optional int32 group_id = 8;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->group_id(), output);
  }

  // optional .google.protobuf.Any user1 = 42;
  if (this->has_user1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->user1_, output);
  }

  // @@protoc_insertion_point(serialize_end:gtpo.pb.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtpo.pb.Node)
  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // optional string label = 2;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gtpo.pb.Node.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // optional double x = 3;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // optional double y = 4;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // optional double z = 5;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->z(), target);
  }

  // optional double width = 6;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // optional double height = 7;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height(), target);
  }

  // optional int32 group_id = 8;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->group_id(), target);
  }

  // optional .google.protobuf.Any user1 = 42;
  if (this->has_user1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->user1_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gtpo.pb.Node)
  return target;
}

int Node::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gtpo.pb.Node)
  int total_size = 0;

  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // optional string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  // optional double x = 3;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 4;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 5;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // optional double width = 6;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // optional double height = 7;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 group_id = 8;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  // optional .google.protobuf.Any user1 = 42;
  if (this->has_user1()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user1_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gtpo.pb.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Node* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gtpo.pb.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gtpo.pb.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtpo.pb.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.has_user1()) {
    mutable_user1()->::google::protobuf::Any::MergeFrom(from.user1());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gtpo.pb.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtpo.pb.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  std::swap(node_id_, other->node_id_);
  label_.Swap(&other->label_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(group_id_, other->group_id_);
  std::swap(user1_, other->user1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional int32 node_id = 1;
void Node::clear_node_id() {
  node_id_ = 0;
}
 ::google::protobuf::int32 Node::node_id() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Node.node_id)
  return node_id_;
}
 void Node::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Node.node_id)
}

// optional string label = 2;
void Node::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::label() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Node.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gtpo.pb.Node.label)
}
 void Node::set_label(const char* value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gtpo.pb.Node.label)
}
 void Node::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gtpo.pb.Node.label)
}
 ::std::string* Node::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:gtpo.pb.Node.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_label() {
  // @@protoc_insertion_point(field_release:gtpo.pb.Node.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:gtpo.pb.Node.label)
}

// optional double x = 3;
void Node::clear_x() {
  x_ = 0;
}
 double Node::x() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Node.x)
  return x_;
}
 void Node::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Node.x)
}

// optional double y = 4;
void Node::clear_y() {
  y_ = 0;
}
 double Node::y() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Node.y)
  return y_;
}
 void Node::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Node.y)
}

// optional double z = 5;
void Node::clear_z() {
  z_ = 0;
}
 double Node::z() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Node.z)
  return z_;
}
 void Node::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Node.z)
}

// optional double width = 6;
void Node::clear_width() {
  width_ = 0;
}
 double Node::width() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Node.width)
  return width_;
}
 void Node::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Node.width)
}

// optional double height = 7;
void Node::clear_height() {
  height_ = 0;
}
 double Node::height() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Node.height)
  return height_;
}
 void Node::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Node.height)
}

// optional int32 group_id = 8;
void Node::clear_group_id() {
  group_id_ = 0;
}
 ::google::protobuf::int32 Node::group_id() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Node.group_id)
  return group_id_;
}
 void Node::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Node.group_id)
}

// optional .google.protobuf.Any user1 = 42;
bool Node::has_user1() const {
  return !_is_default_instance_ && user1_ != NULL;
}
void Node::clear_user1() {
  if (GetArenaNoVirtual() == NULL && user1_ != NULL) delete user1_;
  user1_ = NULL;
}
const ::google::protobuf::Any& Node::user1() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Node.user1)
  return user1_ != NULL ? *user1_ : *default_instance_->user1_;
}
::google::protobuf::Any* Node::mutable_user1() {
  
  if (user1_ == NULL) {
    user1_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:gtpo.pb.Node.user1)
  return user1_;
}
::google::protobuf::Any* Node::release_user1() {
  // @@protoc_insertion_point(field_release:gtpo.pb.Node.user1)
  
  ::google::protobuf::Any* temp = user1_;
  user1_ = NULL;
  return temp;
}
void Node::set_allocated_user1(::google::protobuf::Any* user1) {
  delete user1_;
  user1_ = user1;
  if (user1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gtpo.pb.Node.user1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edge::kEdgeIdFieldNumber;
const int Edge::kSrcNodeIdFieldNumber;
const int Edge::kDstNodeIdFieldNumber;
const int Edge::kWeightFieldNumber;
const int Edge::kZFieldNumber;
const int Edge::kUser1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edge::Edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gtpo.pb.Edge)
}

void Edge::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  user1_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

Edge::Edge(const Edge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gtpo.pb.Edge)
}

void Edge::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  edge_id_ = 0;
  src_node_id_ = 0;
  dst_node_id_ = 0;
  weight_ = 0;
  z_ = 0;
  user1_ = NULL;
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:gtpo.pb.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
  if (this != default_instance_) {
    delete user1_;
  }
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_descriptor_;
}

const Edge& Edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtpo_2eproto();
  return *default_instance_;
}

Edge* Edge::default_instance_ = NULL;

Edge* Edge::New(::google::protobuf::Arena* arena) const {
  Edge* n = new Edge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:gtpo.pb.Edge)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Edge, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Edge*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(edge_id_, z_);
  dst_node_id_ = 0;
  if (GetArenaNoVirtual() == NULL && user1_ != NULL) delete user1_;
  user1_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gtpo.pb.Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 edge_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edge_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_src_node_id;
        break;
      }

      // optional int32 src_node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_src_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dst_node_id;
        break;
      }

      // optional int32 dst_node_id = 3;
      case 3: {
        if (tag == 24) {
         parse_dst_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_weight;
        break;
      }

      // optional double weight = 4;
      case 4: {
        if (tag == 33) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_z;
        break;
      }

      // optional double z = 5;
      case 5: {
        if (tag == 41) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_user1;
        break;
      }

      // optional .google.protobuf.Any user1 = 42;
      case 42: {
        if (tag == 338) {
         parse_user1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gtpo.pb.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gtpo.pb.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gtpo.pb.Edge)
  // optional int32 edge_id = 1;
  if (this->edge_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->edge_id(), output);
  }

  // optional int32 src_node_id = 2;
  if (this->src_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->src_node_id(), output);
  }

  // optional int32 dst_node_id = 3;
  if (this->dst_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dst_node_id(), output);
  }

  // optional double weight = 4;
  if (this->weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->weight(), output);
  }

  // optional double z = 5;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->z(), output);
  }

  // optional .google.protobuf.Any user1 = 42;
  if (this->has_user1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->user1_, output);
  }

  // @@protoc_insertion_point(serialize_end:gtpo.pb.Edge)
}

::google::protobuf::uint8* Edge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtpo.pb.Edge)
  // optional int32 edge_id = 1;
  if (this->edge_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->edge_id(), target);
  }

  // optional int32 src_node_id = 2;
  if (this->src_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->src_node_id(), target);
  }

  // optional int32 dst_node_id = 3;
  if (this->dst_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dst_node_id(), target);
  }

  // optional double weight = 4;
  if (this->weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->weight(), target);
  }

  // optional double z = 5;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->z(), target);
  }

  // optional .google.protobuf.Any user1 = 42;
  if (this->has_user1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->user1_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gtpo.pb.Edge)
  return target;
}

int Edge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gtpo.pb.Edge)
  int total_size = 0;

  // optional int32 edge_id = 1;
  if (this->edge_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->edge_id());
  }

  // optional int32 src_node_id = 2;
  if (this->src_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src_node_id());
  }

  // optional int32 dst_node_id = 3;
  if (this->dst_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dst_node_id());
  }

  // optional double weight = 4;
  if (this->weight() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 5;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // optional .google.protobuf.Any user1 = 42;
  if (this->has_user1()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user1_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gtpo.pb.Edge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Edge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Edge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gtpo.pb.Edge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gtpo.pb.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtpo.pb.Edge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.edge_id() != 0) {
    set_edge_id(from.edge_id());
  }
  if (from.src_node_id() != 0) {
    set_src_node_id(from.src_node_id());
  }
  if (from.dst_node_id() != 0) {
    set_dst_node_id(from.dst_node_id());
  }
  if (from.weight() != 0) {
    set_weight(from.weight());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.has_user1()) {
    mutable_user1()->::google::protobuf::Any::MergeFrom(from.user1());
  }
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gtpo.pb.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtpo.pb.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {

  return true;
}

void Edge::Swap(Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edge::InternalSwap(Edge* other) {
  std::swap(edge_id_, other->edge_id_);
  std::swap(src_node_id_, other->src_node_id_);
  std::swap(dst_node_id_, other->dst_node_id_);
  std::swap(weight_, other->weight_);
  std::swap(z_, other->z_);
  std::swap(user1_, other->user1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge_descriptor_;
  metadata.reflection = Edge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Edge

// optional int32 edge_id = 1;
void Edge::clear_edge_id() {
  edge_id_ = 0;
}
 ::google::protobuf::int32 Edge::edge_id() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Edge.edge_id)
  return edge_id_;
}
 void Edge::set_edge_id(::google::protobuf::int32 value) {
  
  edge_id_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Edge.edge_id)
}

// optional int32 src_node_id = 2;
void Edge::clear_src_node_id() {
  src_node_id_ = 0;
}
 ::google::protobuf::int32 Edge::src_node_id() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Edge.src_node_id)
  return src_node_id_;
}
 void Edge::set_src_node_id(::google::protobuf::int32 value) {
  
  src_node_id_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Edge.src_node_id)
}

// optional int32 dst_node_id = 3;
void Edge::clear_dst_node_id() {
  dst_node_id_ = 0;
}
 ::google::protobuf::int32 Edge::dst_node_id() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Edge.dst_node_id)
  return dst_node_id_;
}
 void Edge::set_dst_node_id(::google::protobuf::int32 value) {
  
  dst_node_id_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Edge.dst_node_id)
}

// optional double weight = 4;
void Edge::clear_weight() {
  weight_ = 0;
}
 double Edge::weight() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Edge.weight)
  return weight_;
}
 void Edge::set_weight(double value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Edge.weight)
}

// optional double z = 5;
void Edge::clear_z() {
  z_ = 0;
}
 double Edge::z() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Edge.z)
  return z_;
}
 void Edge::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Edge.z)
}

// optional .google.protobuf.Any user1 = 42;
bool Edge::has_user1() const {
  return !_is_default_instance_ && user1_ != NULL;
}
void Edge::clear_user1() {
  if (GetArenaNoVirtual() == NULL && user1_ != NULL) delete user1_;
  user1_ = NULL;
}
const ::google::protobuf::Any& Edge::user1() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Edge.user1)
  return user1_ != NULL ? *user1_ : *default_instance_->user1_;
}
::google::protobuf::Any* Edge::mutable_user1() {
  
  if (user1_ == NULL) {
    user1_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:gtpo.pb.Edge.user1)
  return user1_;
}
::google::protobuf::Any* Edge::release_user1() {
  // @@protoc_insertion_point(field_release:gtpo.pb.Edge.user1)
  
  ::google::protobuf::Any* temp = user1_;
  user1_ = NULL;
  return temp;
}
void Edge::set_allocated_user1(::google::protobuf::Any* user1) {
  delete user1_;
  user1_ = user1;
  if (user1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gtpo.pb.Edge.user1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Group::kGroupIdFieldNumber;
const int Group::kLabelFieldNumber;
const int Group::kXFieldNumber;
const int Group::kYFieldNumber;
const int Group::kZFieldNumber;
const int Group::kWidthFieldNumber;
const int Group::kHeightFieldNumber;
const int Group::kNodeIdsFieldNumber;
const int Group::kUser1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Group::Group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gtpo.pb.Group)
}

void Group::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  user1_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

Group::Group(const Group& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gtpo.pb.Group)
}

void Group::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0;
  y_ = 0;
  z_ = 0;
  width_ = 0;
  height_ = 0;
  user1_ = NULL;
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:gtpo.pb.Group)
  SharedDtor();
}

void Group::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete user1_;
  }
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Group_descriptor_;
}

const Group& Group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtpo_2eproto();
  return *default_instance_;
}

Group* Group::default_instance_ = NULL;

Group* Group::New(::google::protobuf::Arena* arena) const {
  Group* n = new Group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Group::Clear() {
// @@protoc_insertion_point(message_clear_start:gtpo.pb.Group)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Group, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Group*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, height_);
  group_id_ = 0;
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && user1_ != NULL) delete user1_;
  user1_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  node_ids_.Clear();
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gtpo.pb.Group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }

      // optional string label = 2;
      case 2: {
        if (tag == 18) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gtpo.pb.Group.label"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_x;
        break;
      }

      // optional double x = 3;
      case 3: {
        if (tag == 25) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_y;
        break;
      }

      // optional double y = 4;
      case 4: {
        if (tag == 33) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_z;
        break;
      }

      // optional double z = 5;
      case 5: {
        if (tag == 41) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_width;
        break;
      }

      // optional double width = 6;
      case 6: {
        if (tag == 49) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_height;
        break;
      }

      // optional double height = 7;
      case 7: {
        if (tag == 57) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_node_ids;
        break;
      }

      // repeated int32 node_ids = 12;
      case 12: {
        if (tag == 98) {
         parse_node_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_node_ids())));
        } else if (tag == 96) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 98, input, this->mutable_node_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_user1;
        break;
      }

      // optional .google.protobuf.Any user1 = 42;
      case 42: {
        if (tag == 338) {
         parse_user1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gtpo.pb.Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gtpo.pb.Group)
  return false;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gtpo.pb.Group)
  // optional int32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // optional string label = 2;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gtpo.pb.Group.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // optional double x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // optional double y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // optional double z = 5;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->z(), output);
  }

  // optional double width = 6;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double height = 7;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height(), output);
  }

  // repeated int32 node_ids = 12;
  if (this->node_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_node_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->node_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->node_ids(i), output);
  }

  // optional .google.protobuf.Any user1 = 42;
  if (this->has_user1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->user1_, output);
  }

  // @@protoc_insertion_point(serialize_end:gtpo.pb.Group)
}

::google::protobuf::uint8* Group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtpo.pb.Group)
  // optional int32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // optional string label = 2;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gtpo.pb.Group.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // optional double x = 3;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // optional double y = 4;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // optional double z = 5;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->z(), target);
  }

  // optional double width = 6;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // optional double height = 7;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height(), target);
  }

  // repeated int32 node_ids = 12;
  if (this->node_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _node_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->node_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->node_ids(i), target);
  }

  // optional .google.protobuf.Any user1 = 42;
  if (this->has_user1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->user1_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gtpo.pb.Group)
  return target;
}

int Group::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gtpo.pb.Group)
  int total_size = 0;

  // optional int32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  // optional string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  // optional double x = 3;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 4;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 5;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // optional double width = 6;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // optional double height = 7;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // optional .google.protobuf.Any user1 = 42;
  if (this->has_user1()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user1_);
  }

  // repeated int32 node_ids = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->node_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->node_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _node_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gtpo.pb.Group)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Group* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gtpo.pb.Group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gtpo.pb.Group)
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtpo.pb.Group)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  node_ids_.MergeFrom(from.node_ids_);
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.has_user1()) {
    mutable_user1()->::google::protobuf::Any::MergeFrom(from.user1());
  }
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gtpo.pb.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtpo.pb.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {

  return true;
}

void Group::Swap(Group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Group::InternalSwap(Group* other) {
  std::swap(group_id_, other->group_id_);
  label_.Swap(&other->label_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  node_ids_.UnsafeArenaSwap(&other->node_ids_);
  std::swap(user1_, other->user1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Group_descriptor_;
  metadata.reflection = Group_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Group

// optional int32 group_id = 1;
void Group::clear_group_id() {
  group_id_ = 0;
}
 ::google::protobuf::int32 Group::group_id() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Group.group_id)
  return group_id_;
}
 void Group::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Group.group_id)
}

// optional string label = 2;
void Group::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Group::label() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Group.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Group::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gtpo.pb.Group.label)
}
 void Group::set_label(const char* value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gtpo.pb.Group.label)
}
 void Group::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gtpo.pb.Group.label)
}
 ::std::string* Group::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:gtpo.pb.Group.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Group::release_label() {
  // @@protoc_insertion_point(field_release:gtpo.pb.Group.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Group::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:gtpo.pb.Group.label)
}

// optional double x = 3;
void Group::clear_x() {
  x_ = 0;
}
 double Group::x() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Group.x)
  return x_;
}
 void Group::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Group.x)
}

// optional double y = 4;
void Group::clear_y() {
  y_ = 0;
}
 double Group::y() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Group.y)
  return y_;
}
 void Group::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Group.y)
}

// optional double z = 5;
void Group::clear_z() {
  z_ = 0;
}
 double Group::z() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Group.z)
  return z_;
}
 void Group::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Group.z)
}

// optional double width = 6;
void Group::clear_width() {
  width_ = 0;
}
 double Group::width() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Group.width)
  return width_;
}
 void Group::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Group.width)
}

// optional double height = 7;
void Group::clear_height() {
  height_ = 0;
}
 double Group::height() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Group.height)
  return height_;
}
 void Group::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Group.height)
}

// repeated int32 node_ids = 12;
int Group::node_ids_size() const {
  return node_ids_.size();
}
void Group::clear_node_ids() {
  node_ids_.Clear();
}
 ::google::protobuf::int32 Group::node_ids(int index) const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Group.node_ids)
  return node_ids_.Get(index);
}
 void Group::set_node_ids(int index, ::google::protobuf::int32 value) {
  node_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:gtpo.pb.Group.node_ids)
}
 void Group::add_node_ids(::google::protobuf::int32 value) {
  node_ids_.Add(value);
  // @@protoc_insertion_point(field_add:gtpo.pb.Group.node_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Group::node_ids() const {
  // @@protoc_insertion_point(field_list:gtpo.pb.Group.node_ids)
  return node_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Group::mutable_node_ids() {
  // @@protoc_insertion_point(field_mutable_list:gtpo.pb.Group.node_ids)
  return &node_ids_;
}

// optional .google.protobuf.Any user1 = 42;
bool Group::has_user1() const {
  return !_is_default_instance_ && user1_ != NULL;
}
void Group::clear_user1() {
  if (GetArenaNoVirtual() == NULL && user1_ != NULL) delete user1_;
  user1_ = NULL;
}
const ::google::protobuf::Any& Group::user1() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Group.user1)
  return user1_ != NULL ? *user1_ : *default_instance_->user1_;
}
::google::protobuf::Any* Group::mutable_user1() {
  
  if (user1_ == NULL) {
    user1_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:gtpo.pb.Group.user1)
  return user1_;
}
::google::protobuf::Any* Group::release_user1() {
  // @@protoc_insertion_point(field_release:gtpo.pb.Group.user1)
  
  ::google::protobuf::Any* temp = user1_;
  user1_ = NULL;
  return temp;
}
void Group::set_allocated_user1(::google::protobuf::Any* user1) {
  delete user1_;
  user1_ = user1;
  if (user1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gtpo.pb.Group.user1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Void::Void()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gtpo.pb.Void)
}

void Void::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Void::Void(const Void& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gtpo.pb.Void)
}

void Void::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Void::~Void() {
  // @@protoc_insertion_point(destructor:gtpo.pb.Void)
  SharedDtor();
}

void Void::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Void::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Void::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Void_descriptor_;
}

const Void& Void::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtpo_2eproto();
  return *default_instance_;
}

Void* Void::default_instance_ = NULL;

Void* Void::New(::google::protobuf::Arena* arena) const {
  Void* n = new Void;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Void::Clear() {
// @@protoc_insertion_point(message_clear_start:gtpo.pb.Void)
}

bool Void::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gtpo.pb.Void)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:gtpo.pb.Void)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gtpo.pb.Void)
  return false;
#undef DO_
}

void Void::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gtpo.pb.Void)
  // @@protoc_insertion_point(serialize_end:gtpo.pb.Void)
}

::google::protobuf::uint8* Void::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtpo.pb.Void)
  // @@protoc_insertion_point(serialize_to_array_end:gtpo.pb.Void)
  return target;
}

int Void::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gtpo.pb.Void)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Void::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gtpo.pb.Void)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Void* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Void>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gtpo.pb.Void)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gtpo.pb.Void)
    MergeFrom(*source);
  }
}

void Void::MergeFrom(const Void& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtpo.pb.Void)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void Void::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gtpo.pb.Void)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Void::CopyFrom(const Void& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtpo.pb.Void)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Void::IsInitialized() const {

  return true;
}

void Void::Swap(Void* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Void::InternalSwap(Void* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Void::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Void_descriptor_;
  metadata.reflection = Void_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Void

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Graph::kNodeCountFieldNumber;
const int Graph::kEdgeCountFieldNumber;
const int Graph::kGroupCountFieldNumber;
const int Graph::kNodesFieldNumber;
const int Graph::kEdgesFieldNumber;
const int Graph::kGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Graph::Graph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gtpo.pb.Graph)
}

void Graph::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Graph::Graph(const Graph& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gtpo.pb.Graph)
}

void Graph::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_count_ = 0;
  edge_count_ = 0;
  group_count_ = 0;
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:gtpo.pb.Graph)
  SharedDtor();
}

void Graph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Graph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Graph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Graph_descriptor_;
}

const Graph& Graph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtpo_2eproto();
  return *default_instance_;
}

Graph* Graph::default_instance_ = NULL;

Graph* Graph::New(::google::protobuf::Arena* arena) const {
  Graph* n = new Graph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:gtpo.pb.Graph)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Graph, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Graph*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_count_, edge_count_);
  group_count_ = 0;

#undef ZR_HELPER_
#undef ZR_

  nodes_.Clear();
  edges_.Clear();
  groups_.Clear();
}

bool Graph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gtpo.pb.Graph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_edge_count;
        break;
      }

      // optional int32 edge_count = 2;
      case 2: {
        if (tag == 16) {
         parse_edge_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edge_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_count;
        break;
      }

      // optional int32 group_count = 3;
      case 3: {
        if (tag == 24) {
         parse_group_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_nodes;
        break;
      }

      // repeated .google.protobuf.Any nodes = 12;
      case 12: {
        if (tag == 98) {
         parse_nodes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_nodes;
        if (input->ExpectTag(106)) goto parse_loop_edges;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.protobuf.Any edges = 13;
      case 13: {
        if (tag == 106) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_edges;
        if (input->ExpectTag(114)) goto parse_loop_groups;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.protobuf.Any groups = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_groups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gtpo.pb.Graph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gtpo.pb.Graph)
  return false;
#undef DO_
}

void Graph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gtpo.pb.Graph)
  // optional int32 node_count = 1;
  if (this->node_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_count(), output);
  }

  // optional int32 edge_count = 2;
  if (this->edge_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->edge_count(), output);
  }

  // optional int32 group_count = 3;
  if (this->group_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->group_count(), output);
  }

  // repeated .google.protobuf.Any nodes = 12;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->nodes(i), output);
  }

  // repeated .google.protobuf.Any edges = 13;
  for (unsigned int i = 0, n = this->edges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->edges(i), output);
  }

  // repeated .google.protobuf.Any groups = 14;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->groups(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gtpo.pb.Graph)
}

::google::protobuf::uint8* Graph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtpo.pb.Graph)
  // optional int32 node_count = 1;
  if (this->node_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_count(), target);
  }

  // optional int32 edge_count = 2;
  if (this->edge_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->edge_count(), target);
  }

  // optional int32 group_count = 3;
  if (this->group_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->group_count(), target);
  }

  // repeated .google.protobuf.Any nodes = 12;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->nodes(i), false, target);
  }

  // repeated .google.protobuf.Any edges = 13;
  for (unsigned int i = 0, n = this->edges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->edges(i), false, target);
  }

  // repeated .google.protobuf.Any groups = 14;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->groups(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gtpo.pb.Graph)
  return target;
}

int Graph::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gtpo.pb.Graph)
  int total_size = 0;

  // optional int32 node_count = 1;
  if (this->node_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_count());
  }

  // optional int32 edge_count = 2;
  if (this->edge_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->edge_count());
  }

  // optional int32 group_count = 3;
  if (this->group_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_count());
  }

  // repeated .google.protobuf.Any nodes = 12;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  // repeated .google.protobuf.Any edges = 13;
  total_size += 1 * this->edges_size();
  for (int i = 0; i < this->edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edges(i));
  }

  // repeated .google.protobuf.Any groups = 14;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Graph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gtpo.pb.Graph)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Graph* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Graph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gtpo.pb.Graph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gtpo.pb.Graph)
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtpo.pb.Graph)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  nodes_.MergeFrom(from.nodes_);
  edges_.MergeFrom(from.edges_);
  groups_.MergeFrom(from.groups_);
  if (from.node_count() != 0) {
    set_node_count(from.node_count());
  }
  if (from.edge_count() != 0) {
    set_edge_count(from.edge_count());
  }
  if (from.group_count() != 0) {
    set_group_count(from.group_count());
  }
}

void Graph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gtpo.pb.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtpo.pb.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {

  return true;
}

void Graph::Swap(Graph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Graph::InternalSwap(Graph* other) {
  std::swap(node_count_, other->node_count_);
  std::swap(edge_count_, other->edge_count_);
  std::swap(group_count_, other->group_count_);
  nodes_.UnsafeArenaSwap(&other->nodes_);
  edges_.UnsafeArenaSwap(&other->edges_);
  groups_.UnsafeArenaSwap(&other->groups_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Graph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Graph_descriptor_;
  metadata.reflection = Graph_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Graph

// optional int32 node_count = 1;
void Graph::clear_node_count() {
  node_count_ = 0;
}
 ::google::protobuf::int32 Graph::node_count() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Graph.node_count)
  return node_count_;
}
 void Graph::set_node_count(::google::protobuf::int32 value) {
  
  node_count_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Graph.node_count)
}

// optional int32 edge_count = 2;
void Graph::clear_edge_count() {
  edge_count_ = 0;
}
 ::google::protobuf::int32 Graph::edge_count() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Graph.edge_count)
  return edge_count_;
}
 void Graph::set_edge_count(::google::protobuf::int32 value) {
  
  edge_count_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Graph.edge_count)
}

// optional int32 group_count = 3;
void Graph::clear_group_count() {
  group_count_ = 0;
}
 ::google::protobuf::int32 Graph::group_count() const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Graph.group_count)
  return group_count_;
}
 void Graph::set_group_count(::google::protobuf::int32 value) {
  
  group_count_ = value;
  // @@protoc_insertion_point(field_set:gtpo.pb.Graph.group_count)
}

// repeated .google.protobuf.Any nodes = 12;
int Graph::nodes_size() const {
  return nodes_.size();
}
void Graph::clear_nodes() {
  nodes_.Clear();
}
const ::google::protobuf::Any& Graph::nodes(int index) const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Graph.nodes)
  return nodes_.Get(index);
}
::google::protobuf::Any* Graph::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:gtpo.pb.Graph.nodes)
  return nodes_.Mutable(index);
}
::google::protobuf::Any* Graph::add_nodes() {
  // @@protoc_insertion_point(field_add:gtpo.pb.Graph.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Graph::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:gtpo.pb.Graph.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Graph::nodes() const {
  // @@protoc_insertion_point(field_list:gtpo.pb.Graph.nodes)
  return nodes_;
}

// repeated .google.protobuf.Any edges = 13;
int Graph::edges_size() const {
  return edges_.size();
}
void Graph::clear_edges() {
  edges_.Clear();
}
const ::google::protobuf::Any& Graph::edges(int index) const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Graph.edges)
  return edges_.Get(index);
}
::google::protobuf::Any* Graph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:gtpo.pb.Graph.edges)
  return edges_.Mutable(index);
}
::google::protobuf::Any* Graph::add_edges() {
  // @@protoc_insertion_point(field_add:gtpo.pb.Graph.edges)
  return edges_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Graph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:gtpo.pb.Graph.edges)
  return &edges_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Graph::edges() const {
  // @@protoc_insertion_point(field_list:gtpo.pb.Graph.edges)
  return edges_;
}

// repeated .google.protobuf.Any groups = 14;
int Graph::groups_size() const {
  return groups_.size();
}
void Graph::clear_groups() {
  groups_.Clear();
}
const ::google::protobuf::Any& Graph::groups(int index) const {
  // @@protoc_insertion_point(field_get:gtpo.pb.Graph.groups)
  return groups_.Get(index);
}
::google::protobuf::Any* Graph::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:gtpo.pb.Graph.groups)
  return groups_.Mutable(index);
}
::google::protobuf::Any* Graph::add_groups() {
  // @@protoc_insertion_point(field_add:gtpo.pb.Graph.groups)
  return groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Graph::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:gtpo.pb.Graph.groups)
  return &groups_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Graph::groups() const {
  // @@protoc_insertion_point(field_list:gtpo.pb.Graph.groups)
  return groups_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace gtpo

// @@protoc_insertion_point(global_scope)
