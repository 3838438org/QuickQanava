// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topology.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "topology.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qan {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* QanImgNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QanImgNode_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_topology_2eproto() {
  protobuf_AddDesc_topology_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "topology.proto");
  GOOGLE_CHECK(file != NULL);
  QanImgNode_descriptor_ = file->message_type(0);
  static const int QanImgNode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QanImgNode, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QanImgNode, img_data_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QanImgNode, img_data_),
  };
  QanImgNode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QanImgNode_descriptor_,
      QanImgNode::default_instance_,
      QanImgNode_offsets_,
      -1,
      -1,
      -1,
      sizeof(QanImgNode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QanImgNode, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QanImgNode, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_topology_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QanImgNode_descriptor_, &QanImgNode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_topology_2eproto() {
  delete QanImgNode::default_instance_;
  delete QanImgNode_reflection_;
}

void protobuf_AddDesc_topology_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gtpo::pb::protobuf_AddDesc_gtpo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016topology.proto\022\006qan.pb\032\ngtpo.proto\"R\n\n"
    "QanImgNode\022\033\n\004base\030\001 \001(\0132\r.gtpo.pb.Node\022"
    "\025\n\rimg_data_size\030\004 \001(\005\022\020\n\010img_data\030\005 \001(\014"
    "b\006proto3", 128);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "topology.proto", &protobuf_RegisterTypes);
  QanImgNode::default_instance_ = new QanImgNode();
  QanImgNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_topology_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_topology_2eproto {
  StaticDescriptorInitializer_topology_2eproto() {
    protobuf_AddDesc_topology_2eproto();
  }
} static_descriptor_initializer_topology_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QanImgNode::kBaseFieldNumber;
const int QanImgNode::kImgDataSizeFieldNumber;
const int QanImgNode::kImgDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QanImgNode::QanImgNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qan.pb.QanImgNode)
}

void QanImgNode::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::gtpo::pb::Node*>(&::gtpo::pb::Node::default_instance());
}

QanImgNode::QanImgNode(const QanImgNode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qan.pb.QanImgNode)
}

void QanImgNode::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_ = NULL;
  img_data_size_ = 0;
  img_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QanImgNode::~QanImgNode() {
  // @@protoc_insertion_point(destructor:qan.pb.QanImgNode)
  SharedDtor();
}

void QanImgNode::SharedDtor() {
  img_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete base_;
  }
}

void QanImgNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QanImgNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QanImgNode_descriptor_;
}

const QanImgNode& QanImgNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2eproto();
  return *default_instance_;
}

QanImgNode* QanImgNode::default_instance_ = NULL;

QanImgNode* QanImgNode::New(::google::protobuf::Arena* arena) const {
  QanImgNode* n = new QanImgNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QanImgNode::Clear() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  img_data_size_ = 0;
  img_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QanImgNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qan.pb.QanImgNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gtpo.pb.Node base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_img_data_size;
        break;
      }

      // optional int32 img_data_size = 4;
      case 4: {
        if (tag == 32) {
         parse_img_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &img_data_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_img_data;
        break;
      }

      // optional bytes img_data = 5;
      case 5: {
        if (tag == 42) {
         parse_img_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_img_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qan.pb.QanImgNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qan.pb.QanImgNode)
  return false;
#undef DO_
}

void QanImgNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qan.pb.QanImgNode)
  // optional .gtpo.pb.Node base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional int32 img_data_size = 4;
  if (this->img_data_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->img_data_size(), output);
  }

  // optional bytes img_data = 5;
  if (this->img_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->img_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:qan.pb.QanImgNode)
}

::google::protobuf::uint8* QanImgNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qan.pb.QanImgNode)
  // optional .gtpo.pb.Node base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->base_, target);
  }

  // optional int32 img_data_size = 4;
  if (this->img_data_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->img_data_size(), target);
  }

  // optional bytes img_data = 5;
  if (this->img_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->img_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:qan.pb.QanImgNode)
  return target;
}

int QanImgNode::ByteSize() const {
  int total_size = 0;

  // optional .gtpo.pb.Node base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional int32 img_data_size = 4;
  if (this->img_data_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->img_data_size());
  }

  // optional bytes img_data = 5;
  if (this->img_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->img_data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QanImgNode::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QanImgNode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QanImgNode>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QanImgNode::MergeFrom(const QanImgNode& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_base()) {
    mutable_base()->::gtpo::pb::Node::MergeFrom(from.base());
  }
  if (from.img_data_size() != 0) {
    set_img_data_size(from.img_data_size());
  }
  if (from.img_data().size() > 0) {

    img_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_data_);
  }
}

void QanImgNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QanImgNode::CopyFrom(const QanImgNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QanImgNode::IsInitialized() const {

  return true;
}

void QanImgNode::Swap(QanImgNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QanImgNode::InternalSwap(QanImgNode* other) {
  std::swap(base_, other->base_);
  std::swap(img_data_size_, other->img_data_size_);
  img_data_.Swap(&other->img_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QanImgNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QanImgNode_descriptor_;
  metadata.reflection = QanImgNode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QanImgNode

// optional .gtpo.pb.Node base = 1;
bool QanImgNode::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void QanImgNode::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::gtpo::pb::Node& QanImgNode::base() const {
  // @@protoc_insertion_point(field_get:qan.pb.QanImgNode.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::gtpo::pb::Node* QanImgNode::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::gtpo::pb::Node;
  }
  // @@protoc_insertion_point(field_mutable:qan.pb.QanImgNode.base)
  return base_;
}
::gtpo::pb::Node* QanImgNode::release_base() {
  
  ::gtpo::pb::Node* temp = base_;
  base_ = NULL;
  return temp;
}
void QanImgNode::set_allocated_base(::gtpo::pb::Node* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:qan.pb.QanImgNode.base)
}

// optional int32 img_data_size = 4;
void QanImgNode::clear_img_data_size() {
  img_data_size_ = 0;
}
 ::google::protobuf::int32 QanImgNode::img_data_size() const {
  // @@protoc_insertion_point(field_get:qan.pb.QanImgNode.img_data_size)
  return img_data_size_;
}
 void QanImgNode::set_img_data_size(::google::protobuf::int32 value) {
  
  img_data_size_ = value;
  // @@protoc_insertion_point(field_set:qan.pb.QanImgNode.img_data_size)
}

// optional bytes img_data = 5;
void QanImgNode::clear_img_data() {
  img_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QanImgNode::img_data() const {
  // @@protoc_insertion_point(field_get:qan.pb.QanImgNode.img_data)
  return img_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QanImgNode::set_img_data(const ::std::string& value) {
  
  img_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qan.pb.QanImgNode.img_data)
}
 void QanImgNode::set_img_data(const char* value) {
  
  img_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qan.pb.QanImgNode.img_data)
}
 void QanImgNode::set_img_data(const void* value, size_t size) {
  
  img_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qan.pb.QanImgNode.img_data)
}
 ::std::string* QanImgNode::mutable_img_data() {
  
  // @@protoc_insertion_point(field_mutable:qan.pb.QanImgNode.img_data)
  return img_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QanImgNode::release_img_data() {
  
  return img_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QanImgNode::set_allocated_img_data(::std::string* img_data) {
  if (img_data != NULL) {
    
  } else {
    
  }
  img_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img_data);
  // @@protoc_insertion_point(field_set_allocated:qan.pb.QanImgNode.img_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace qan

// @@protoc_insertion_point(global_scope)
